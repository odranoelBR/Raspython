Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     program -> error
Rule 4     statement -> INTEGER command NEWLINE
Rule 5     statement -> RUN NEWLINE
Rule 6     statement -> LIST NEWLINE
Rule 7     statement -> NEW NEWLINE
Rule 8     statement -> INTEGER NEWLINE
Rule 9     statement -> INTEGER error NEWLINE
Rule 10    statement -> NEWLINE
Rule 11    command -> LET variable EQUALS expr
Rule 12    command -> LET variable EQUALS error
Rule 13    command -> READ varlist
Rule 14    command -> READ error
Rule 15    command -> DATA numlist
Rule 16    command -> DATA error
Rule 17    command -> PRINT plist optend
Rule 18    command -> PRINT error
Rule 19    optend -> COMMA
Rule 20    optend -> SEMI
Rule 21    optend -> <empty>
Rule 22    command -> PRINT
Rule 23    command -> GOTO INTEGER
Rule 24    command -> GOTO error
Rule 25    command -> IF relexpr THEN INTEGER
Rule 26    command -> IF error THEN INTEGER
Rule 27    command -> IF relexpr THEN error
Rule 28    command -> FOR ID EQUALS expr TO expr optstep
Rule 29    command -> FOR ID EQUALS error TO expr optstep
Rule 30    command -> FOR ID EQUALS expr TO error optstep
Rule 31    command -> FOR ID EQUALS expr TO expr STEP error
Rule 32    optstep -> STEP expr
Rule 33    optstep -> empty
Rule 34    command -> NEXT ID
Rule 35    command -> NEXT error
Rule 36    command -> END
Rule 37    command -> REM
Rule 38    command -> STOP
Rule 39    command -> DEF ID LPAREN ID RPAREN EQUALS expr
Rule 40    command -> DEF ID LPAREN ID RPAREN EQUALS error
Rule 41    command -> DEF ID LPAREN error RPAREN EQUALS expr
Rule 42    command -> GOSUB INTEGER
Rule 43    command -> GOSUB error
Rule 44    command -> RETURN
Rule 45    command -> DIM dimlist
Rule 46    command -> DIM error
Rule 47    dimlist -> dimlist COMMA dimitem
Rule 48    dimlist -> dimitem
Rule 49    dimitem -> ID LPAREN INTEGER RPAREN
Rule 50    dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN
Rule 51    expr -> expr PLUS expr
Rule 52    expr -> expr MINUS expr
Rule 53    expr -> expr TIMES expr
Rule 54    expr -> expr DIVIDE expr
Rule 55    expr -> expr POWER expr
Rule 56    expr -> INTEGER
Rule 57    expr -> FLOAT
Rule 58    expr -> variable
Rule 59    expr -> LPAREN expr RPAREN
Rule 60    expr -> MINUS expr
Rule 61    relexpr -> expr LT expr
Rule 62    relexpr -> expr LE expr
Rule 63    relexpr -> expr GT expr
Rule 64    relexpr -> expr GE expr
Rule 65    relexpr -> expr EQUALS expr
Rule 66    relexpr -> expr NE expr
Rule 67    variable -> ID
Rule 68    variable -> ID LPAREN expr RPAREN
Rule 69    variable -> ID LPAREN expr COMMA expr RPAREN
Rule 70    varlist -> varlist COMMA variable
Rule 71    varlist -> variable
Rule 72    numlist -> numlist COMMA number
Rule 73    numlist -> number
Rule 74    number -> INTEGER
Rule 75    number -> FLOAT
Rule 76    number -> MINUS INTEGER
Rule 77    number -> MINUS FLOAT
Rule 78    plist -> plist COMMA pitem
Rule 79    plist -> pitem
Rule 80    pitem -> STRING
Rule 81    pitem -> STRING expr
Rule 82    pitem -> expr
Rule 83    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 19 47 50 69 70 72 78
DATA                 : 15 16
DEF                  : 39 40 41
DIM                  : 45 46
DIVIDE               : 54
END                  : 36
EQUALS               : 11 12 28 29 30 31 39 40 41 65
FLOAT                : 57 75 77
FOR                  : 28 29 30 31
GE                   : 64
GOSUB                : 42 43
GOTO                 : 23 24
GT                   : 63
ID                   : 28 29 30 31 34 39 39 40 40 41 49 50 67 68 69
IF                   : 25 26 27
INTEGER              : 4 8 9 23 25 26 42 49 50 50 56 74 76
LE                   : 62
LET                  : 11 12
LIST                 : 6
LPAREN               : 39 40 41 49 50 59 68 69
LT                   : 61
MINUS                : 52 60 76 77
NE                   : 66
NEW                  : 7
NEWLINE              : 4 5 6 7 8 9 10
NEXT                 : 34 35
PLUS                 : 51
POWER                : 55
PRINT                : 17 18 22
READ                 : 13 14
REM                  : 37
RETURN               : 44
RPAREN               : 39 40 41 49 50 59 68 69
RUN                  : 5
SEMI                 : 20
STEP                 : 31 32
STOP                 : 38
STRING               : 80 81
THEN                 : 25 26 27
TIMES                : 53
TO                   : 28 29 30 31
error                : 3 9 12 14 16 18 24 26 27 29 30 31 35 40 41 43 46

Nonterminals, with rules where they appear

command              : 4
dimitem              : 47 48
dimlist              : 45 47
empty                : 33
expr                 : 11 28 28 29 30 31 31 32 39 41 51 51 52 52 53 53 54 54 55 55 59 60 61 61 62 62 63 63 64 64 65 65 66 66 68 69 69 81 82
number               : 72 73
numlist              : 15 72
optend               : 17
optstep              : 28 29 30
pitem                : 78 79
plist                : 17 78
program              : 1 0
relexpr              : 25 27
statement            : 1 2
variable             : 11 12 58 70 71
varlist              : 13 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) program -> . error
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    error           shift and go to state 7
    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    program                        shift and go to state 5
    statement                      shift and go to state 6

state 1

    (7) statement -> NEW . NEWLINE

    NEWLINE         shift and go to state 9


state 2

    (5) statement -> RUN . NEWLINE

    NEWLINE         shift and go to state 10


state 3

    (10) statement -> NEWLINE .

    INTEGER         reduce using rule 10 (statement -> NEWLINE .)
    RUN             reduce using rule 10 (statement -> NEWLINE .)
    LIST            reduce using rule 10 (statement -> NEWLINE .)
    NEW             reduce using rule 10 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> NEWLINE .)
    $end            reduce using rule 10 (statement -> NEWLINE .)


state 4

    (6) statement -> LIST . NEWLINE

    NEWLINE         shift and go to state 11


state 5

    (0) S' -> program .
    (1) program -> program . statement
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    statement                      shift and go to state 12

state 6

    (2) program -> statement .

    INTEGER         reduce using rule 2 (program -> statement .)
    RUN             reduce using rule 2 (program -> statement .)
    LIST            reduce using rule 2 (program -> statement .)
    NEW             reduce using rule 2 (program -> statement .)
    NEWLINE         reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 7

    (3) program -> error .

    INTEGER         reduce using rule 3 (program -> error .)
    RUN             reduce using rule 3 (program -> error .)
    LIST            reduce using rule 3 (program -> error .)
    NEW             reduce using rule 3 (program -> error .)
    NEWLINE         reduce using rule 3 (program -> error .)
    $end            reduce using rule 3 (program -> error .)


state 8

    (4) statement -> INTEGER . command NEWLINE
    (8) statement -> INTEGER . NEWLINE
    (9) statement -> INTEGER . error NEWLINE
    (11) command -> . LET variable EQUALS expr
    (12) command -> . LET variable EQUALS error
    (13) command -> . READ varlist
    (14) command -> . READ error
    (15) command -> . DATA numlist
    (16) command -> . DATA error
    (17) command -> . PRINT plist optend
    (18) command -> . PRINT error
    (22) command -> . PRINT
    (23) command -> . GOTO INTEGER
    (24) command -> . GOTO error
    (25) command -> . IF relexpr THEN INTEGER
    (26) command -> . IF error THEN INTEGER
    (27) command -> . IF relexpr THEN error
    (28) command -> . FOR ID EQUALS expr TO expr optstep
    (29) command -> . FOR ID EQUALS error TO expr optstep
    (30) command -> . FOR ID EQUALS expr TO error optstep
    (31) command -> . FOR ID EQUALS expr TO expr STEP error
    (34) command -> . NEXT ID
    (35) command -> . NEXT error
    (36) command -> . END
    (37) command -> . REM
    (38) command -> . STOP
    (39) command -> . DEF ID LPAREN ID RPAREN EQUALS expr
    (40) command -> . DEF ID LPAREN ID RPAREN EQUALS error
    (41) command -> . DEF ID LPAREN error RPAREN EQUALS expr
    (42) command -> . GOSUB INTEGER
    (43) command -> . GOSUB error
    (44) command -> . RETURN
    (45) command -> . DIM dimlist
    (46) command -> . DIM error

    NEWLINE         shift and go to state 21
    error           shift and go to state 30
    LET             shift and go to state 29
    READ            shift and go to state 15
    DATA            shift and go to state 20
    PRINT           shift and go to state 18
    GOTO            shift and go to state 26
    IF              shift and go to state 28
    FOR             shift and go to state 27
    NEXT            shift and go to state 22
    END             shift and go to state 25
    REM             shift and go to state 17
    STOP            shift and go to state 16
    DEF             shift and go to state 19
    GOSUB           shift and go to state 24
    RETURN          shift and go to state 13
    DIM             shift and go to state 14

    command                        shift and go to state 23

state 9

    (7) statement -> NEW NEWLINE .

    INTEGER         reduce using rule 7 (statement -> NEW NEWLINE .)
    RUN             reduce using rule 7 (statement -> NEW NEWLINE .)
    LIST            reduce using rule 7 (statement -> NEW NEWLINE .)
    NEW             reduce using rule 7 (statement -> NEW NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> NEW NEWLINE .)
    $end            reduce using rule 7 (statement -> NEW NEWLINE .)


state 10

    (5) statement -> RUN NEWLINE .

    INTEGER         reduce using rule 5 (statement -> RUN NEWLINE .)
    RUN             reduce using rule 5 (statement -> RUN NEWLINE .)
    LIST            reduce using rule 5 (statement -> RUN NEWLINE .)
    NEW             reduce using rule 5 (statement -> RUN NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> RUN NEWLINE .)
    $end            reduce using rule 5 (statement -> RUN NEWLINE .)


state 11

    (6) statement -> LIST NEWLINE .

    INTEGER         reduce using rule 6 (statement -> LIST NEWLINE .)
    RUN             reduce using rule 6 (statement -> LIST NEWLINE .)
    LIST            reduce using rule 6 (statement -> LIST NEWLINE .)
    NEW             reduce using rule 6 (statement -> LIST NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> LIST NEWLINE .)
    $end            reduce using rule 6 (statement -> LIST NEWLINE .)


state 12

    (1) program -> program statement .

    INTEGER         reduce using rule 1 (program -> program statement .)
    RUN             reduce using rule 1 (program -> program statement .)
    LIST            reduce using rule 1 (program -> program statement .)
    NEW             reduce using rule 1 (program -> program statement .)
    NEWLINE         reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 13

    (44) command -> RETURN .

    NEWLINE         reduce using rule 44 (command -> RETURN .)


state 14

    (45) command -> DIM . dimlist
    (46) command -> DIM . error
    (47) dimlist -> . dimlist COMMA dimitem
    (48) dimlist -> . dimitem
    (49) dimitem -> . ID LPAREN INTEGER RPAREN
    (50) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    error           shift and go to state 33
    ID              shift and go to state 34

    dimitem                        shift and go to state 31
    dimlist                        shift and go to state 32

state 15

    (13) command -> READ . varlist
    (14) command -> READ . error
    (70) varlist -> . varlist COMMA variable
    (71) varlist -> . variable
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 36
    ID              shift and go to state 38

    varlist                        shift and go to state 35
    variable                       shift and go to state 37

state 16

    (38) command -> STOP .

    NEWLINE         reduce using rule 38 (command -> STOP .)


state 17

    (37) command -> REM .

    NEWLINE         reduce using rule 37 (command -> REM .)


state 18

    (17) command -> PRINT . plist optend
    (18) command -> PRINT . error
    (22) command -> PRINT .
    (78) plist -> . plist COMMA pitem
    (79) plist -> . pitem
    (80) pitem -> . STRING
    (81) pitem -> . STRING expr
    (82) pitem -> . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 47
    NEWLINE         reduce using rule 22 (command -> PRINT .)
    STRING          shift and go to state 40
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    pitem                          shift and go to state 39
    expr                           shift and go to state 41
    plist                          shift and go to state 48
    variable                       shift and go to state 45

state 19

    (39) command -> DEF . ID LPAREN ID RPAREN EQUALS expr
    (40) command -> DEF . ID LPAREN ID RPAREN EQUALS error
    (41) command -> DEF . ID LPAREN error RPAREN EQUALS expr

    ID              shift and go to state 49


state 20

    (15) command -> DATA . numlist
    (16) command -> DATA . error
    (72) numlist -> . numlist COMMA number
    (73) numlist -> . number
    (74) number -> . INTEGER
    (75) number -> . FLOAT
    (76) number -> . MINUS INTEGER
    (77) number -> . MINUS FLOAT

    error           shift and go to state 52
    INTEGER         shift and go to state 53
    FLOAT           shift and go to state 50
    MINUS           shift and go to state 54

    number                         shift and go to state 51
    numlist                        shift and go to state 55

state 21

    (8) statement -> INTEGER NEWLINE .

    INTEGER         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    RUN             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    LIST            reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEW             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    $end            reduce using rule 8 (statement -> INTEGER NEWLINE .)


state 22

    (34) command -> NEXT . ID
    (35) command -> NEXT . error

    ID              shift and go to state 57
    error           shift and go to state 56


state 23

    (4) statement -> INTEGER command . NEWLINE

    NEWLINE         shift and go to state 58


state 24

    (42) command -> GOSUB . INTEGER
    (43) command -> GOSUB . error

    INTEGER         shift and go to state 60
    error           shift and go to state 59


state 25

    (36) command -> END .

    NEWLINE         reduce using rule 36 (command -> END .)


state 26

    (23) command -> GOTO . INTEGER
    (24) command -> GOTO . error

    INTEGER         shift and go to state 61
    error           shift and go to state 62


state 27

    (28) command -> FOR . ID EQUALS expr TO expr optstep
    (29) command -> FOR . ID EQUALS error TO expr optstep
    (30) command -> FOR . ID EQUALS expr TO error optstep
    (31) command -> FOR . ID EQUALS expr TO expr STEP error

    ID              shift and go to state 63


state 28

    (25) command -> IF . relexpr THEN INTEGER
    (26) command -> IF . error THEN INTEGER
    (27) command -> IF . relexpr THEN error
    (61) relexpr -> . expr LT expr
    (62) relexpr -> . expr LE expr
    (63) relexpr -> . expr GT expr
    (64) relexpr -> . expr GE expr
    (65) relexpr -> . expr EQUALS expr
    (66) relexpr -> . expr NE expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 66
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 65
    relexpr                        shift and go to state 64

state 29

    (11) command -> LET . variable EQUALS expr
    (12) command -> LET . variable EQUALS error
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 38

    variable                       shift and go to state 67

state 30

    (9) statement -> INTEGER error . NEWLINE

    NEWLINE         shift and go to state 68


state 31

    (48) dimlist -> dimitem .

    COMMA           reduce using rule 48 (dimlist -> dimitem .)
    NEWLINE         reduce using rule 48 (dimlist -> dimitem .)


state 32

    (45) command -> DIM dimlist .
    (47) dimlist -> dimlist . COMMA dimitem

    NEWLINE         reduce using rule 45 (command -> DIM dimlist .)
    COMMA           shift and go to state 69


state 33

    (46) command -> DIM error .

    NEWLINE         reduce using rule 46 (command -> DIM error .)


state 34

    (49) dimitem -> ID . LPAREN INTEGER RPAREN
    (50) dimitem -> ID . LPAREN INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 70


state 35

    (13) command -> READ varlist .
    (70) varlist -> varlist . COMMA variable

    NEWLINE         reduce using rule 13 (command -> READ varlist .)
    COMMA           shift and go to state 71


state 36

    (14) command -> READ error .

    NEWLINE         reduce using rule 14 (command -> READ error .)


state 37

    (71) varlist -> variable .

    COMMA           reduce using rule 71 (varlist -> variable .)
    NEWLINE         reduce using rule 71 (varlist -> variable .)


state 38

    (67) variable -> ID .
    (68) variable -> ID . LPAREN expr RPAREN
    (69) variable -> ID . LPAREN expr COMMA expr RPAREN

    PLUS            reduce using rule 67 (variable -> ID .)
    MINUS           reduce using rule 67 (variable -> ID .)
    TIMES           reduce using rule 67 (variable -> ID .)
    DIVIDE          reduce using rule 67 (variable -> ID .)
    POWER           reduce using rule 67 (variable -> ID .)
    COMMA           reduce using rule 67 (variable -> ID .)
    SEMI            reduce using rule 67 (variable -> ID .)
    NEWLINE         reduce using rule 67 (variable -> ID .)
    THEN            reduce using rule 67 (variable -> ID .)
    LT              reduce using rule 67 (variable -> ID .)
    LE              reduce using rule 67 (variable -> ID .)
    GT              reduce using rule 67 (variable -> ID .)
    GE              reduce using rule 67 (variable -> ID .)
    EQUALS          reduce using rule 67 (variable -> ID .)
    NE              reduce using rule 67 (variable -> ID .)
    RPAREN          reduce using rule 67 (variable -> ID .)
    TO              reduce using rule 67 (variable -> ID .)
    STEP            reduce using rule 67 (variable -> ID .)
    LPAREN          shift and go to state 72


state 39

    (79) plist -> pitem .

    COMMA           reduce using rule 79 (plist -> pitem .)
    SEMI            reduce using rule 79 (plist -> pitem .)
    NEWLINE         reduce using rule 79 (plist -> pitem .)


state 40

    (80) pitem -> STRING .
    (81) pitem -> STRING . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    COMMA           reduce using rule 80 (pitem -> STRING .)
    SEMI            reduce using rule 80 (pitem -> STRING .)
    NEWLINE         reduce using rule 80 (pitem -> STRING .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 73

state 41

    (82) pitem -> expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    COMMA           reduce using rule 82 (pitem -> expr .)
    SEMI            reduce using rule 82 (pitem -> expr .)
    NEWLINE         reduce using rule 82 (pitem -> expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 42

    (57) expr -> FLOAT .

    TO              reduce using rule 57 (expr -> FLOAT .)
    PLUS            reduce using rule 57 (expr -> FLOAT .)
    MINUS           reduce using rule 57 (expr -> FLOAT .)
    TIMES           reduce using rule 57 (expr -> FLOAT .)
    DIVIDE          reduce using rule 57 (expr -> FLOAT .)
    POWER           reduce using rule 57 (expr -> FLOAT .)
    COMMA           reduce using rule 57 (expr -> FLOAT .)
    SEMI            reduce using rule 57 (expr -> FLOAT .)
    NEWLINE         reduce using rule 57 (expr -> FLOAT .)
    THEN            reduce using rule 57 (expr -> FLOAT .)
    LT              reduce using rule 57 (expr -> FLOAT .)
    LE              reduce using rule 57 (expr -> FLOAT .)
    GT              reduce using rule 57 (expr -> FLOAT .)
    GE              reduce using rule 57 (expr -> FLOAT .)
    EQUALS          reduce using rule 57 (expr -> FLOAT .)
    NE              reduce using rule 57 (expr -> FLOAT .)
    RPAREN          reduce using rule 57 (expr -> FLOAT .)
    STEP            reduce using rule 57 (expr -> FLOAT .)


state 43

    (60) expr -> MINUS . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 79

state 44

    (56) expr -> INTEGER .

    TO              reduce using rule 56 (expr -> INTEGER .)
    PLUS            reduce using rule 56 (expr -> INTEGER .)
    MINUS           reduce using rule 56 (expr -> INTEGER .)
    TIMES           reduce using rule 56 (expr -> INTEGER .)
    DIVIDE          reduce using rule 56 (expr -> INTEGER .)
    POWER           reduce using rule 56 (expr -> INTEGER .)
    COMMA           reduce using rule 56 (expr -> INTEGER .)
    SEMI            reduce using rule 56 (expr -> INTEGER .)
    NEWLINE         reduce using rule 56 (expr -> INTEGER .)
    THEN            reduce using rule 56 (expr -> INTEGER .)
    LT              reduce using rule 56 (expr -> INTEGER .)
    LE              reduce using rule 56 (expr -> INTEGER .)
    GT              reduce using rule 56 (expr -> INTEGER .)
    GE              reduce using rule 56 (expr -> INTEGER .)
    EQUALS          reduce using rule 56 (expr -> INTEGER .)
    NE              reduce using rule 56 (expr -> INTEGER .)
    RPAREN          reduce using rule 56 (expr -> INTEGER .)
    STEP            reduce using rule 56 (expr -> INTEGER .)


state 45

    (58) expr -> variable .

    TO              reduce using rule 58 (expr -> variable .)
    PLUS            reduce using rule 58 (expr -> variable .)
    MINUS           reduce using rule 58 (expr -> variable .)
    TIMES           reduce using rule 58 (expr -> variable .)
    DIVIDE          reduce using rule 58 (expr -> variable .)
    POWER           reduce using rule 58 (expr -> variable .)
    COMMA           reduce using rule 58 (expr -> variable .)
    SEMI            reduce using rule 58 (expr -> variable .)
    NEWLINE         reduce using rule 58 (expr -> variable .)
    THEN            reduce using rule 58 (expr -> variable .)
    LT              reduce using rule 58 (expr -> variable .)
    LE              reduce using rule 58 (expr -> variable .)
    GT              reduce using rule 58 (expr -> variable .)
    GE              reduce using rule 58 (expr -> variable .)
    EQUALS          reduce using rule 58 (expr -> variable .)
    NE              reduce using rule 58 (expr -> variable .)
    RPAREN          reduce using rule 58 (expr -> variable .)
    STEP            reduce using rule 58 (expr -> variable .)


state 46

    (59) expr -> LPAREN . expr RPAREN
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 80

state 47

    (18) command -> PRINT error .

    NEWLINE         reduce using rule 18 (command -> PRINT error .)


state 48

    (17) command -> PRINT plist . optend
    (78) plist -> plist . COMMA pitem
    (19) optend -> . COMMA
    (20) optend -> . SEMI
    (21) optend -> .

    COMMA           shift and go to state 82
    SEMI            shift and go to state 81
    NEWLINE         reduce using rule 21 (optend -> .)

    optend                         shift and go to state 83

state 49

    (39) command -> DEF ID . LPAREN ID RPAREN EQUALS expr
    (40) command -> DEF ID . LPAREN ID RPAREN EQUALS error
    (41) command -> DEF ID . LPAREN error RPAREN EQUALS expr

    LPAREN          shift and go to state 84


state 50

    (75) number -> FLOAT .

    COMMA           reduce using rule 75 (number -> FLOAT .)
    NEWLINE         reduce using rule 75 (number -> FLOAT .)


state 51

    (73) numlist -> number .

    COMMA           reduce using rule 73 (numlist -> number .)
    NEWLINE         reduce using rule 73 (numlist -> number .)


state 52

    (16) command -> DATA error .

    NEWLINE         reduce using rule 16 (command -> DATA error .)


state 53

    (74) number -> INTEGER .

    COMMA           reduce using rule 74 (number -> INTEGER .)
    NEWLINE         reduce using rule 74 (number -> INTEGER .)


state 54

    (76) number -> MINUS . INTEGER
    (77) number -> MINUS . FLOAT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86


state 55

    (15) command -> DATA numlist .
    (72) numlist -> numlist . COMMA number

    NEWLINE         reduce using rule 15 (command -> DATA numlist .)
    COMMA           shift and go to state 87


state 56

    (35) command -> NEXT error .

    NEWLINE         reduce using rule 35 (command -> NEXT error .)


state 57

    (34) command -> NEXT ID .

    NEWLINE         reduce using rule 34 (command -> NEXT ID .)


state 58

    (4) statement -> INTEGER command NEWLINE .

    INTEGER         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    RUN             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    LIST            reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEW             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    $end            reduce using rule 4 (statement -> INTEGER command NEWLINE .)


state 59

    (43) command -> GOSUB error .

    NEWLINE         reduce using rule 43 (command -> GOSUB error .)


state 60

    (42) command -> GOSUB INTEGER .

    NEWLINE         reduce using rule 42 (command -> GOSUB INTEGER .)


state 61

    (23) command -> GOTO INTEGER .

    NEWLINE         reduce using rule 23 (command -> GOTO INTEGER .)


state 62

    (24) command -> GOTO error .

    NEWLINE         reduce using rule 24 (command -> GOTO error .)


state 63

    (28) command -> FOR ID . EQUALS expr TO expr optstep
    (29) command -> FOR ID . EQUALS error TO expr optstep
    (30) command -> FOR ID . EQUALS expr TO error optstep
    (31) command -> FOR ID . EQUALS expr TO expr STEP error

    EQUALS          shift and go to state 88


state 64

    (25) command -> IF relexpr . THEN INTEGER
    (27) command -> IF relexpr . THEN error

    THEN            shift and go to state 89


state 65

    (61) relexpr -> expr . LT expr
    (62) relexpr -> expr . LE expr
    (63) relexpr -> expr . GT expr
    (64) relexpr -> expr . GE expr
    (65) relexpr -> expr . EQUALS expr
    (66) relexpr -> expr . NE expr
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    LT              shift and go to state 94
    LE              shift and go to state 90
    GT              shift and go to state 95
    GE              shift and go to state 91
    EQUALS          shift and go to state 92
    NE              shift and go to state 93
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 66

    (26) command -> IF error . THEN INTEGER

    THEN            shift and go to state 96


state 67

    (11) command -> LET variable . EQUALS expr
    (12) command -> LET variable . EQUALS error

    EQUALS          shift and go to state 97


state 68

    (9) statement -> INTEGER error NEWLINE .

    INTEGER         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    RUN             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    LIST            reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEW             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    $end            reduce using rule 9 (statement -> INTEGER error NEWLINE .)


state 69

    (47) dimlist -> dimlist COMMA . dimitem
    (49) dimitem -> . ID LPAREN INTEGER RPAREN
    (50) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    ID              shift and go to state 34

    dimitem                        shift and go to state 98

state 70

    (49) dimitem -> ID LPAREN . INTEGER RPAREN
    (50) dimitem -> ID LPAREN . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 99


state 71

    (70) varlist -> varlist COMMA . variable
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 38

    variable                       shift and go to state 100

state 72

    (68) variable -> ID LPAREN . expr RPAREN
    (69) variable -> ID LPAREN . expr COMMA expr RPAREN
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 101

state 73

    (81) pitem -> STRING expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    COMMA           reduce using rule 81 (pitem -> STRING expr .)
    SEMI            reduce using rule 81 (pitem -> STRING expr .)
    NEWLINE         reduce using rule 81 (pitem -> STRING expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 74

    (54) expr -> expr DIVIDE . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 102

state 75

    (55) expr -> expr POWER . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 103

state 76

    (53) expr -> expr TIMES . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 104

state 77

    (51) expr -> expr PLUS . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 105

state 78

    (52) expr -> expr MINUS . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 106

state 79

    (60) expr -> MINUS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 60 (expr -> MINUS expr .)
    PLUS            reduce using rule 60 (expr -> MINUS expr .)
    MINUS           reduce using rule 60 (expr -> MINUS expr .)
    TIMES           reduce using rule 60 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 60 (expr -> MINUS expr .)
    POWER           reduce using rule 60 (expr -> MINUS expr .)
    COMMA           reduce using rule 60 (expr -> MINUS expr .)
    SEMI            reduce using rule 60 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 60 (expr -> MINUS expr .)
    THEN            reduce using rule 60 (expr -> MINUS expr .)
    LT              reduce using rule 60 (expr -> MINUS expr .)
    LE              reduce using rule 60 (expr -> MINUS expr .)
    GT              reduce using rule 60 (expr -> MINUS expr .)
    GE              reduce using rule 60 (expr -> MINUS expr .)
    EQUALS          reduce using rule 60 (expr -> MINUS expr .)
    NE              reduce using rule 60 (expr -> MINUS expr .)
    RPAREN          reduce using rule 60 (expr -> MINUS expr .)
    STEP            reduce using rule 60 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 74 ]
  ! POWER           [ shift and go to state 75 ]


state 80

    (59) expr -> LPAREN expr . RPAREN
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 81

    (20) optend -> SEMI .

    NEWLINE         reduce using rule 20 (optend -> SEMI .)


state 82

    (78) plist -> plist COMMA . pitem
    (19) optend -> COMMA .
    (80) pitem -> . STRING
    (81) pitem -> . STRING expr
    (82) pitem -> . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    NEWLINE         reduce using rule 19 (optend -> COMMA .)
    STRING          shift and go to state 40
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    pitem                          shift and go to state 108
    expr                           shift and go to state 41
    variable                       shift and go to state 45

state 83

    (17) command -> PRINT plist optend .

    NEWLINE         reduce using rule 17 (command -> PRINT plist optend .)


state 84

    (39) command -> DEF ID LPAREN . ID RPAREN EQUALS expr
    (40) command -> DEF ID LPAREN . ID RPAREN EQUALS error
    (41) command -> DEF ID LPAREN . error RPAREN EQUALS expr

    ID              shift and go to state 110
    error           shift and go to state 109


state 85

    (76) number -> MINUS INTEGER .

    COMMA           reduce using rule 76 (number -> MINUS INTEGER .)
    NEWLINE         reduce using rule 76 (number -> MINUS INTEGER .)


state 86

    (77) number -> MINUS FLOAT .

    COMMA           reduce using rule 77 (number -> MINUS FLOAT .)
    NEWLINE         reduce using rule 77 (number -> MINUS FLOAT .)


state 87

    (72) numlist -> numlist COMMA . number
    (74) number -> . INTEGER
    (75) number -> . FLOAT
    (76) number -> . MINUS INTEGER
    (77) number -> . MINUS FLOAT

    INTEGER         shift and go to state 53
    FLOAT           shift and go to state 50
    MINUS           shift and go to state 54

    number                         shift and go to state 111

state 88

    (28) command -> FOR ID EQUALS . expr TO expr optstep
    (29) command -> FOR ID EQUALS . error TO expr optstep
    (30) command -> FOR ID EQUALS . expr TO error optstep
    (31) command -> FOR ID EQUALS . expr TO expr STEP error
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 113
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 112

state 89

    (25) command -> IF relexpr THEN . INTEGER
    (27) command -> IF relexpr THEN . error

    INTEGER         shift and go to state 114
    error           shift and go to state 115


state 90

    (62) relexpr -> expr LE . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 116

state 91

    (64) relexpr -> expr GE . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 117

state 92

    (65) relexpr -> expr EQUALS . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 118

state 93

    (66) relexpr -> expr NE . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 119

state 94

    (61) relexpr -> expr LT . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 120

state 95

    (63) relexpr -> expr GT . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 121

state 96

    (26) command -> IF error THEN . INTEGER

    INTEGER         shift and go to state 122


state 97

    (11) command -> LET variable EQUALS . expr
    (12) command -> LET variable EQUALS . error
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 124
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 123

state 98

    (47) dimlist -> dimlist COMMA dimitem .

    COMMA           reduce using rule 47 (dimlist -> dimlist COMMA dimitem .)
    NEWLINE         reduce using rule 47 (dimlist -> dimlist COMMA dimitem .)


state 99

    (49) dimitem -> ID LPAREN INTEGER . RPAREN
    (50) dimitem -> ID LPAREN INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 126
    COMMA           shift and go to state 125


state 100

    (70) varlist -> varlist COMMA variable .

    COMMA           reduce using rule 70 (varlist -> varlist COMMA variable .)
    NEWLINE         reduce using rule 70 (varlist -> varlist COMMA variable .)


state 101

    (68) variable -> ID LPAREN expr . RPAREN
    (69) variable -> ID LPAREN expr . COMMA expr RPAREN
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 128
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 102

    (54) expr -> expr DIVIDE expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 54 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 54 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 54 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 54 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 54 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 54 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 54 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 54 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 54 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 54 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 54 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 54 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 54 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 54 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 54 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 54 (expr -> expr DIVIDE expr .)
    STEP            reduce using rule 54 (expr -> expr DIVIDE expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 54 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 74 ]


state 103

    (55) expr -> expr POWER expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 55 (expr -> expr POWER expr .)
    PLUS            reduce using rule 55 (expr -> expr POWER expr .)
    MINUS           reduce using rule 55 (expr -> expr POWER expr .)
    TIMES           reduce using rule 55 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 55 (expr -> expr POWER expr .)
    POWER           reduce using rule 55 (expr -> expr POWER expr .)
    COMMA           reduce using rule 55 (expr -> expr POWER expr .)
    SEMI            reduce using rule 55 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 55 (expr -> expr POWER expr .)
    THEN            reduce using rule 55 (expr -> expr POWER expr .)
    LT              reduce using rule 55 (expr -> expr POWER expr .)
    LE              reduce using rule 55 (expr -> expr POWER expr .)
    GT              reduce using rule 55 (expr -> expr POWER expr .)
    GE              reduce using rule 55 (expr -> expr POWER expr .)
    EQUALS          reduce using rule 55 (expr -> expr POWER expr .)
    NE              reduce using rule 55 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 55 (expr -> expr POWER expr .)
    STEP            reduce using rule 55 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 74 ]
  ! POWER           [ shift and go to state 75 ]


state 104

    (53) expr -> expr TIMES expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 53 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 53 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 53 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 53 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 53 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 53 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 53 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 53 (expr -> expr TIMES expr .)
    THEN            reduce using rule 53 (expr -> expr TIMES expr .)
    LT              reduce using rule 53 (expr -> expr TIMES expr .)
    LE              reduce using rule 53 (expr -> expr TIMES expr .)
    GT              reduce using rule 53 (expr -> expr TIMES expr .)
    GE              reduce using rule 53 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 53 (expr -> expr TIMES expr .)
    NE              reduce using rule 53 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 53 (expr -> expr TIMES expr .)
    STEP            reduce using rule 53 (expr -> expr TIMES expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 53 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 74 ]


state 105

    (51) expr -> expr PLUS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 51 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 51 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 51 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 51 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 51 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 51 (expr -> expr PLUS expr .)
    THEN            reduce using rule 51 (expr -> expr PLUS expr .)
    LT              reduce using rule 51 (expr -> expr PLUS expr .)
    LE              reduce using rule 51 (expr -> expr PLUS expr .)
    GT              reduce using rule 51 (expr -> expr PLUS expr .)
    GE              reduce using rule 51 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 51 (expr -> expr PLUS expr .)
    NE              reduce using rule 51 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 51 (expr -> expr PLUS expr .)
    STEP            reduce using rule 51 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75

  ! TIMES           [ reduce using rule 51 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 51 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]


state 106

    (52) expr -> expr MINUS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              reduce using rule 52 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 52 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 52 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 52 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 52 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 52 (expr -> expr MINUS expr .)
    THEN            reduce using rule 52 (expr -> expr MINUS expr .)
    LT              reduce using rule 52 (expr -> expr MINUS expr .)
    LE              reduce using rule 52 (expr -> expr MINUS expr .)
    GT              reduce using rule 52 (expr -> expr MINUS expr .)
    GE              reduce using rule 52 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 52 (expr -> expr MINUS expr .)
    NE              reduce using rule 52 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 52 (expr -> expr MINUS expr .)
    STEP            reduce using rule 52 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75

  ! TIMES           [ reduce using rule 52 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 52 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]


state 107

    (59) expr -> LPAREN expr RPAREN .

    TO              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 59 (expr -> LPAREN expr RPAREN .)
    STEP            reduce using rule 59 (expr -> LPAREN expr RPAREN .)


state 108

    (78) plist -> plist COMMA pitem .

    COMMA           reduce using rule 78 (plist -> plist COMMA pitem .)
    SEMI            reduce using rule 78 (plist -> plist COMMA pitem .)
    NEWLINE         reduce using rule 78 (plist -> plist COMMA pitem .)


state 109

    (41) command -> DEF ID LPAREN error . RPAREN EQUALS expr

    RPAREN          shift and go to state 129


state 110

    (39) command -> DEF ID LPAREN ID . RPAREN EQUALS expr
    (40) command -> DEF ID LPAREN ID . RPAREN EQUALS error

    RPAREN          shift and go to state 130


state 111

    (72) numlist -> numlist COMMA number .

    COMMA           reduce using rule 72 (numlist -> numlist COMMA number .)
    NEWLINE         reduce using rule 72 (numlist -> numlist COMMA number .)


state 112

    (28) command -> FOR ID EQUALS expr . TO expr optstep
    (30) command -> FOR ID EQUALS expr . TO error optstep
    (31) command -> FOR ID EQUALS expr . TO expr STEP error
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    TO              shift and go to state 131
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 113

    (29) command -> FOR ID EQUALS error . TO expr optstep

    TO              shift and go to state 132


state 114

    (25) command -> IF relexpr THEN INTEGER .

    NEWLINE         reduce using rule 25 (command -> IF relexpr THEN INTEGER .)


state 115

    (27) command -> IF relexpr THEN error .

    NEWLINE         reduce using rule 27 (command -> IF relexpr THEN error .)


state 116

    (62) relexpr -> expr LE expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 62 (relexpr -> expr LE expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 117

    (64) relexpr -> expr GE expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 64 (relexpr -> expr GE expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 118

    (65) relexpr -> expr EQUALS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 65 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 119

    (66) relexpr -> expr NE expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 66 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 120

    (61) relexpr -> expr LT expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 61 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 121

    (63) relexpr -> expr GT expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    THEN            reduce using rule 63 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 122

    (26) command -> IF error THEN INTEGER .

    NEWLINE         reduce using rule 26 (command -> IF error THEN INTEGER .)


state 123

    (11) command -> LET variable EQUALS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    NEWLINE         reduce using rule 11 (command -> LET variable EQUALS expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 124

    (12) command -> LET variable EQUALS error .

    NEWLINE         reduce using rule 12 (command -> LET variable EQUALS error .)


state 125

    (50) dimitem -> ID LPAREN INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 133


state 126

    (49) dimitem -> ID LPAREN INTEGER RPAREN .

    COMMA           reduce using rule 49 (dimitem -> ID LPAREN INTEGER RPAREN .)
    NEWLINE         reduce using rule 49 (dimitem -> ID LPAREN INTEGER RPAREN .)


state 127

    (68) variable -> ID LPAREN expr RPAREN .

    PLUS            reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    MINUS           reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    TIMES           reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    POWER           reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    COMMA           reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    SEMI            reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    THEN            reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    LT              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    LE              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    GT              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    GE              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    EQUALS          reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    NE              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    RPAREN          reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    TO              reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)
    STEP            reduce using rule 68 (variable -> ID LPAREN expr RPAREN .)


state 128

    (69) variable -> ID LPAREN expr COMMA . expr RPAREN
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 134

state 129

    (41) command -> DEF ID LPAREN error RPAREN . EQUALS expr

    EQUALS          shift and go to state 135


state 130

    (39) command -> DEF ID LPAREN ID RPAREN . EQUALS expr
    (40) command -> DEF ID LPAREN ID RPAREN . EQUALS error

    EQUALS          shift and go to state 136


state 131

    (28) command -> FOR ID EQUALS expr TO . expr optstep
    (30) command -> FOR ID EQUALS expr TO . error optstep
    (31) command -> FOR ID EQUALS expr TO . expr STEP error
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 138
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 137

state 132

    (29) command -> FOR ID EQUALS error TO . expr optstep
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 139

state 133

    (50) dimitem -> ID LPAREN INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 140


state 134

    (69) variable -> ID LPAREN expr COMMA expr . RPAREN
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 135

    (41) command -> DEF ID LPAREN error RPAREN EQUALS . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 142

state 136

    (39) command -> DEF ID LPAREN ID RPAREN EQUALS . expr
    (40) command -> DEF ID LPAREN ID RPAREN EQUALS . error
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 144
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 143

state 137

    (28) command -> FOR ID EQUALS expr TO expr . optstep
    (31) command -> FOR ID EQUALS expr TO expr . STEP error
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr
    (32) optstep -> . STEP expr
    (33) optstep -> . empty
    (83) empty -> .

    STEP            shift and go to state 145
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75
    NEWLINE         reduce using rule 83 (empty -> .)

    empty                          shift and go to state 147
    optstep                        shift and go to state 146

state 138

    (30) command -> FOR ID EQUALS expr TO error . optstep
    (32) optstep -> . STEP expr
    (33) optstep -> . empty
    (83) empty -> .

    STEP            shift and go to state 148
    NEWLINE         reduce using rule 83 (empty -> .)

    empty                          shift and go to state 147
    optstep                        shift and go to state 149

state 139

    (29) command -> FOR ID EQUALS error TO expr . optstep
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr
    (32) optstep -> . STEP expr
    (33) optstep -> . empty
    (83) empty -> .

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75
    STEP            shift and go to state 148
    NEWLINE         reduce using rule 83 (empty -> .)

    empty                          shift and go to state 147
    optstep                        shift and go to state 150

state 140

    (50) dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .

    COMMA           reduce using rule 50 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)
    NEWLINE         reduce using rule 50 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)


state 141

    (69) variable -> ID LPAREN expr COMMA expr RPAREN .

    PLUS            reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    POWER           reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    SEMI            reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NEWLINE         reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    THEN            reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LT              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LE              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GT              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GE              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    EQUALS          reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NE              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TO              reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    STEP            reduce using rule 69 (variable -> ID LPAREN expr COMMA expr RPAREN .)


state 142

    (41) command -> DEF ID LPAREN error RPAREN EQUALS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    NEWLINE         reduce using rule 41 (command -> DEF ID LPAREN error RPAREN EQUALS expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 143

    (39) command -> DEF ID LPAREN ID RPAREN EQUALS expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    NEWLINE         reduce using rule 39 (command -> DEF ID LPAREN ID RPAREN EQUALS expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 144

    (40) command -> DEF ID LPAREN ID RPAREN EQUALS error .

    NEWLINE         reduce using rule 40 (command -> DEF ID LPAREN ID RPAREN EQUALS error .)


state 145

    (31) command -> FOR ID EQUALS expr TO expr STEP . error
    (32) optstep -> STEP . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 152
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 151

state 146

    (28) command -> FOR ID EQUALS expr TO expr optstep .

    NEWLINE         reduce using rule 28 (command -> FOR ID EQUALS expr TO expr optstep .)


state 147

    (33) optstep -> empty .

    NEWLINE         reduce using rule 33 (optstep -> empty .)


state 148

    (32) optstep -> STEP . expr
    (51) expr -> . expr PLUS expr
    (52) expr -> . expr MINUS expr
    (53) expr -> . expr TIMES expr
    (54) expr -> . expr DIVIDE expr
    (55) expr -> . expr POWER expr
    (56) expr -> . INTEGER
    (57) expr -> . FLOAT
    (58) expr -> . variable
    (59) expr -> . LPAREN expr RPAREN
    (60) expr -> . MINUS expr
    (67) variable -> . ID
    (68) variable -> . ID LPAREN expr RPAREN
    (69) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 43
    ID              shift and go to state 38

    variable                       shift and go to state 45
    expr                           shift and go to state 151

state 149

    (30) command -> FOR ID EQUALS expr TO error optstep .

    NEWLINE         reduce using rule 30 (command -> FOR ID EQUALS expr TO error optstep .)


state 150

    (29) command -> FOR ID EQUALS error TO expr optstep .

    NEWLINE         reduce using rule 29 (command -> FOR ID EQUALS error TO expr optstep .)


state 151

    (32) optstep -> STEP expr .
    (51) expr -> expr . PLUS expr
    (52) expr -> expr . MINUS expr
    (53) expr -> expr . TIMES expr
    (54) expr -> expr . DIVIDE expr
    (55) expr -> expr . POWER expr

    NEWLINE         reduce using rule 32 (optstep -> STEP expr .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75


state 152

    (31) command -> FOR ID EQUALS expr TO expr STEP error .

    NEWLINE         reduce using rule 31 (command -> FOR ID EQUALS expr TO expr STEP error .)

